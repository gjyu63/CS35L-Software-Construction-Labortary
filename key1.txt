Jiayu Guo
304-773-262
W17

1.1

1. E M A C S SP E X E R 1 . H T M L
2. C-s P U B L I C E n t e r
3. C-s Laboratory Enter M-b
4. C-s self-referential Enter M-b M-b
5. C-s arrow Enter M-b
6. C-e
7. C-a
8,9
10. C-x C-c

1.2

1. E M A C S SP E X E R 2 . H T M L
2. M-g g 18 ENTER C-k
3. C-s DELETEME Enter C-a C-k
4. C-s https://en.wik C-s Enter C-p C-k C-k C-k C-k
5. C-s <! Enter LEFT LEFT C-Space RIGHT RIGHT RIGHT RIGHT RIGHT RIGHT RIGHT C-w
6. C-s <! Enter C-a C-k
7.C-x C-c

1.3

1. E M A C S SP E X E R 2 . H T M L
2. C-s Assignment 1 Enter Backspace 3 7 C-s Assignment 1 Enter Backspace 3 7
3. C-s UTF-8 Enter Backspace Backspace Backspace Backspace U S - A S C I I
4. C-s <ol/> Enter C-o

1.4

2. E M A C S  E X E R 4 . H T M L
3. M >  left arrow C-Sp M-w C-s </html> C-s Enter Enter C-y
4. M > Up arrow Right arrow C-Sp M-w C-s log lines C-s C-s Enter Sp C-y M-g 379 
/* turn on line# mode via M-x linum-mode */ Right Arrow C-Sp RightArrow 
RightArrow DownArrow DownArrow M-w M-g g 303 C-y M-gg 372 RightArrow 
C-Sp RightArrow M-w M-g g 93 C-y M-g g 363 Right C-Sp Down 
Down  Right Right Right M-w M-g g 18 C-y
5. M-g g 356 Enter C-Sp M-> C-w
6. C-x u
7. C-g g 356 <!-- M-> -->
8. M < M-x replace-string RET <ol> RET <Ol> RET

1.5
1. E M A C S RET M-x make-directory RET junk RET
M-x cd RET
junk RET
2. C-x C-f hello.c RET //then type in the C code
3. M-x compile Enter hello
4. M-x compile ./hello -o hello-out Enter

we get 

-*- mode: compilation; default-directory: 
"~/Desktop/cs35l/wk1/~junk/" -*-
Compilation started at Sat Jan 14 15:21:39

./hello -o hello-out
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c
{%c  char n = '%cn';%\
c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c 
 printf (p,\
 n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  
return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q,
 n, n, n, n);
  return 0;
}


Compilation finished at Sat Jan 14 15:21:39


1.6
1. C-x b *scratch*
2. (random ) C-j
3. (setq x (random )) RET (setq y (random )) RET
I've got (setq x (random  ))
1938554726746311915 and (setq y (random ))
663437779231897429
To get multiplication, (setq z (* x y))
1527600889564907271

5. M-: (* x y z)
1377761012625236529

There IS diffenence.

6. It is not truely random. The random number generated in lisp comes 
from an algorithm that takes the time seed. 
It's determined and not truely random.

7. We can plot a graph. The inner region represents the number
 pair that will NOT cause the overflow. The outside region 
(in square shape) is the area with all reasonable number pairs. 
The possibility equals to the ratio of the inner area with the 
bigger area. 
i.e. 1 - 4*longlongmax/(2*longlongmax)^2 = 1-1/long long max
